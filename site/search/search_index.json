{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"golang%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E6%9C%80%E7%BB%88%E4%B9%8Bjaeger%E7%9A%84%E5%89%AF%E6%9C%AC/","text":"golang \u5206\u5e03\u5f0f\u94fe\u8def\u8ffd\u8e2a\u4e4bjaeger \u4e00 \u80cc\u666f \u5f00\u653e\u5f0f\u5206\u5e03\u5f0f\u8ffd\u8e2a\u89c4\u8303\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u81ea\u884c\u767e\u5ea6 google \u3002 \u5e38\u89c1\u5b9e\u73b0\uff1a jaeger zipkin \u4e8c jaeger\u90e8\u7f72 2.1 Docker\u90e8\u7f72 docker\u8fd0\u884c docker run -d --name jaeger \\ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\ -p 5775:5775/udp \\ -p 6831:6831/udp \\ -p 6832:6832/udp \\ -p 5778:5778 \\ -p 16686:16686 \\ -p 14268:14268 \\ -p 9411:9411 \\ jaegertracing/all-in-one:1.12 \u6d4f\u89c8\u5668\u8bbf\u95ee http://localhost:16686/search \u4e09 \u7f16\u5199\u4ee3\u7801 \u76ee\u5f55\u7ed3\u6784 $ /workspace/goworkspace/src/github.com/kaliarch/jaeger-demo \ue0b0 tree . \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 client.go \u2502 \u2514\u2500\u2500 client_test.go \u251c\u2500\u2500 go.mod \u251c\u2500\u2500 go.sum \u251c\u2500\u2500 main.go \u2514\u2500\u2500 tracer \u2514\u2500\u2500 tracer.go tracer/trace.go package tracer import ( \"io\" \"time\" \"github.com/opentracing/opentracing-go\" \"github.com/uber/jaeger-client-go\" jaegercfg \"github.com/uber/jaeger-client-go/config\" ) var Tracer opentracing.Tracer // NewTracer \u521b\u5efa\u4e00\u4e2ajaeger trace func NewTracer(serverName, address string) (opentracing.Tracer, io.Closer, error) { // \u751f\u6210jaegercfg cfg := jaegercfg.Configuration{ ServiceName: serverName, Sampler: &jaegercfg.SamplerConfig{ Type: jaeger.SamplerTypeConst, Param: 1, }, Reporter: &jaegercfg.ReporterConfig{ LogSpans: true, BufferFlushInterval: 1 * time.Second, }, } transport, err := jaeger.NewUDPTransport(address, 0) if err != nil { return nil, nil, err } reporter := jaeger.NewRemoteReporter(transport) options := jaegercfg.Reporter(reporter) return cfg.NewTracer(options) } main.go package main import ( \"fmt\" \"github.com/gin-gonic/gin\" tracer2 \"github.com/kaliarch/jaeger-demo/tracer\" \"github.com/opentracing-contrib/go-gin/ginhttp\" \"net/http\" ) const ( ginServerName = \"gin-server-demo\" jaegerEndpoint = \"127.0.0.1:6831\" ) func main() { tracer, closer, err := tracer2.NewTracer(ginServerName, jaegerEndpoint) if err != nil { panic(err) } defer closer.Close() r := gin.Default() jaegerMiddle := ginhttp.Middleware(tracer, ginhttp.OperationNameFunc(func(r *http.Request) string { return fmt.Sprintf(\"HTTP %s %s\", r.Method, r.URL.String()) })) r.Use(ginhttp.Middleware(tracer)) r.Use(jaegerMiddle) r.GET(\"/ping\", func(c *gin.Context) { c.JSON(200, gin.H{ \"msg\": \"pong\", }) }) _ = r.Run(\":8888\") } client.go package client import ( \"context\" \"fmt\" tracer2 \"github.com/kaliarch/jaeger-demo/tracer\" \"github.com/opentracing-contrib/go-stdlib/nethttp\" \"github.com/opentracing/opentracing-go\" \"github.com/opentracing/opentracing-go/ext\" otlog \"github.com/opentracing/opentracing-go/log\" \"io/ioutil\" \"log\" \"net/http\" ) const ( // \u670d\u52a1\u540d \u670d\u52a1\u552f\u4e00\u6807\u793a\uff0c\u670d\u52a1\u6307\u6807\u805a\u5408\u8fc7\u6ee4\u4f9d\u636e\u3002 clientServerName = \"demo-gin-client\" jaegerEndpoint = \"127.0.0.1:6831\" ginEndpoint = \"http://127.0.0.1:8888\" ) func HandlerError(span opentracing.Span, err error) { span.SetTag(string(ext.Error), true) span.LogKV(otlog.Error(err)) //log.Fatal(\"%v\", err) } // StartClient gin client \u4e5f\u662f\u6807\u51c6\u7684 http client. func StartClient() { tracer, closer, err := tracer2.NewTracer(clientServerName, jaegerEndpoint) if err != nil { panic(err) } defer closer.Close() span := tracer.StartSpan(\"CallDemoServer\") ctx := opentracing.ContextWithSpan(context.Background(), span) defer span.Finish() // \u6784\u5efahttp\u8bf7\u6c42 req, err := http.NewRequest( http.MethodGet, fmt.Sprintf(\"%s/ping\", ginEndpoint), nil, ) if err != nil { HandlerError(span, err) return } // \u6784\u5efa\u5e26tracer\u7684\u8bf7\u6c42 req = req.WithContext(ctx) req, ht := nethttp.TraceRequest(tracer, req) defer ht.Finish() // \u521d\u59cb\u5316http\u5ba2\u6237\u7aef httpClient := &http.Client{Transport: &nethttp.Transport{}} // \u53d1\u8d77\u8bf7\u6c42 res, err := httpClient.Do(req) if err != nil { HandlerError(span, err) return } defer res.Body.Close() body, err := ioutil.ReadAll(res.Body) if err != nil { HandlerError(span, err) return } log.Printf(\" %s recevice: %s\\n\", clientServerName, string(body)) } \u56db \u6f14\u793a \u53c2\u8003\u94fe\u63a5 https://www.jaegertracing.io/ https://github.com/why444216978/gin-api/blob/master/routers/router.go https://cloud.tencent.com/document/product/1463/57863","title":"golang \u5206\u5e03\u5f0f\u94fe\u8def\u8ffd\u8e2a\u4e4bjaeger"},{"location":"golang%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E6%9C%80%E7%BB%88%E4%B9%8Bjaeger%E7%9A%84%E5%89%AF%E6%9C%AC/#golang-jaeger","text":"","title":"golang \u5206\u5e03\u5f0f\u94fe\u8def\u8ffd\u8e2a\u4e4bjaeger"},{"location":"golang%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E6%9C%80%E7%BB%88%E4%B9%8Bjaeger%E7%9A%84%E5%89%AF%E6%9C%AC/#_1","text":"\u5f00\u653e\u5f0f\u5206\u5e03\u5f0f\u8ffd\u8e2a\u89c4\u8303\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u81ea\u884c\u767e\u5ea6 google \u3002 \u5e38\u89c1\u5b9e\u73b0\uff1a jaeger zipkin","title":"\u4e00 \u80cc\u666f"},{"location":"golang%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E6%9C%80%E7%BB%88%E4%B9%8Bjaeger%E7%9A%84%E5%89%AF%E6%9C%AC/#jaeger","text":"","title":"\u4e8c jaeger\u90e8\u7f72"},{"location":"golang%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E6%9C%80%E7%BB%88%E4%B9%8Bjaeger%E7%9A%84%E5%89%AF%E6%9C%AC/#21-docker","text":"docker\u8fd0\u884c docker run -d --name jaeger \\ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\ -p 5775:5775/udp \\ -p 6831:6831/udp \\ -p 6832:6832/udp \\ -p 5778:5778 \\ -p 16686:16686 \\ -p 14268:14268 \\ -p 9411:9411 \\ jaegertracing/all-in-one:1.12 \u6d4f\u89c8\u5668\u8bbf\u95ee http://localhost:16686/search","title":"2.1 Docker\u90e8\u7f72"},{"location":"golang%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E6%9C%80%E7%BB%88%E4%B9%8Bjaeger%E7%9A%84%E5%89%AF%E6%9C%AC/#_2","text":"\u76ee\u5f55\u7ed3\u6784 $ /workspace/goworkspace/src/github.com/kaliarch/jaeger-demo \ue0b0 tree . \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 client.go \u2502 \u2514\u2500\u2500 client_test.go \u251c\u2500\u2500 go.mod \u251c\u2500\u2500 go.sum \u251c\u2500\u2500 main.go \u2514\u2500\u2500 tracer \u2514\u2500\u2500 tracer.go tracer/trace.go package tracer import ( \"io\" \"time\" \"github.com/opentracing/opentracing-go\" \"github.com/uber/jaeger-client-go\" jaegercfg \"github.com/uber/jaeger-client-go/config\" ) var Tracer opentracing.Tracer // NewTracer \u521b\u5efa\u4e00\u4e2ajaeger trace func NewTracer(serverName, address string) (opentracing.Tracer, io.Closer, error) { // \u751f\u6210jaegercfg cfg := jaegercfg.Configuration{ ServiceName: serverName, Sampler: &jaegercfg.SamplerConfig{ Type: jaeger.SamplerTypeConst, Param: 1, }, Reporter: &jaegercfg.ReporterConfig{ LogSpans: true, BufferFlushInterval: 1 * time.Second, }, } transport, err := jaeger.NewUDPTransport(address, 0) if err != nil { return nil, nil, err } reporter := jaeger.NewRemoteReporter(transport) options := jaegercfg.Reporter(reporter) return cfg.NewTracer(options) } main.go package main import ( \"fmt\" \"github.com/gin-gonic/gin\" tracer2 \"github.com/kaliarch/jaeger-demo/tracer\" \"github.com/opentracing-contrib/go-gin/ginhttp\" \"net/http\" ) const ( ginServerName = \"gin-server-demo\" jaegerEndpoint = \"127.0.0.1:6831\" ) func main() { tracer, closer, err := tracer2.NewTracer(ginServerName, jaegerEndpoint) if err != nil { panic(err) } defer closer.Close() r := gin.Default() jaegerMiddle := ginhttp.Middleware(tracer, ginhttp.OperationNameFunc(func(r *http.Request) string { return fmt.Sprintf(\"HTTP %s %s\", r.Method, r.URL.String()) })) r.Use(ginhttp.Middleware(tracer)) r.Use(jaegerMiddle) r.GET(\"/ping\", func(c *gin.Context) { c.JSON(200, gin.H{ \"msg\": \"pong\", }) }) _ = r.Run(\":8888\") } client.go package client import ( \"context\" \"fmt\" tracer2 \"github.com/kaliarch/jaeger-demo/tracer\" \"github.com/opentracing-contrib/go-stdlib/nethttp\" \"github.com/opentracing/opentracing-go\" \"github.com/opentracing/opentracing-go/ext\" otlog \"github.com/opentracing/opentracing-go/log\" \"io/ioutil\" \"log\" \"net/http\" ) const ( // \u670d\u52a1\u540d \u670d\u52a1\u552f\u4e00\u6807\u793a\uff0c\u670d\u52a1\u6307\u6807\u805a\u5408\u8fc7\u6ee4\u4f9d\u636e\u3002 clientServerName = \"demo-gin-client\" jaegerEndpoint = \"127.0.0.1:6831\" ginEndpoint = \"http://127.0.0.1:8888\" ) func HandlerError(span opentracing.Span, err error) { span.SetTag(string(ext.Error), true) span.LogKV(otlog.Error(err)) //log.Fatal(\"%v\", err) } // StartClient gin client \u4e5f\u662f\u6807\u51c6\u7684 http client. func StartClient() { tracer, closer, err := tracer2.NewTracer(clientServerName, jaegerEndpoint) if err != nil { panic(err) } defer closer.Close() span := tracer.StartSpan(\"CallDemoServer\") ctx := opentracing.ContextWithSpan(context.Background(), span) defer span.Finish() // \u6784\u5efahttp\u8bf7\u6c42 req, err := http.NewRequest( http.MethodGet, fmt.Sprintf(\"%s/ping\", ginEndpoint), nil, ) if err != nil { HandlerError(span, err) return } // \u6784\u5efa\u5e26tracer\u7684\u8bf7\u6c42 req = req.WithContext(ctx) req, ht := nethttp.TraceRequest(tracer, req) defer ht.Finish() // \u521d\u59cb\u5316http\u5ba2\u6237\u7aef httpClient := &http.Client{Transport: &nethttp.Transport{}} // \u53d1\u8d77\u8bf7\u6c42 res, err := httpClient.Do(req) if err != nil { HandlerError(span, err) return } defer res.Body.Close() body, err := ioutil.ReadAll(res.Body) if err != nil { HandlerError(span, err) return } log.Printf(\" %s recevice: %s\\n\", clientServerName, string(body)) }","title":"\u4e09 \u7f16\u5199\u4ee3\u7801"},{"location":"golang%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E6%9C%80%E7%BB%88%E4%B9%8Bjaeger%E7%9A%84%E5%89%AF%E6%9C%AC/#_3","text":"","title":"\u56db \u6f14\u793a"},{"location":"golang%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E6%9C%80%E7%BB%88%E4%B9%8Bjaeger%E7%9A%84%E5%89%AF%E6%9C%AC/#_4","text":"https://www.jaegertracing.io/ https://github.com/why444216978/gin-api/blob/master/routers/router.go https://cloud.tencent.com/document/product/1463/57863","title":"\u53c2\u8003\u94fe\u63a5"}]}